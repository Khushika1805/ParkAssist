import React, { useEffect, useRef } from 'react';
import { MapContainer, TileLayer, Marker, Popup } from 'react-leaflet';
import L from 'leaflet';
import 'leaflet/dist/leaflet.css';
import { useNavigate } from 'react-router-dom';
import { createPageUrl } from '@/utils';

// Custom marker icons
const createCustomIcon = (status) => {
  const colors = {
    available: '#10B981', // Green
    limited: '#F59E0B',   // Yellow
    full: '#EF4444'       // Red
  };
  
  return L.divIcon({
    html: `
      <div style="
        background-color: ${colors[status]};
        width: 24px;
        height: 24px;
        border-radius: 50%;
        border: 3px solid white;
        box-shadow: 0 2px 8px rgba(0,0,0,0.3);
        display: flex;
        align-items: center;
        justify-content: center;
      ">
        <div style="
          background-color: white;
          width: 8px;
          height: 8px;
          border-radius: 50%;
        "></div>
      </div>
    `,
    className: 'custom-parking-marker',
    iconSize: [24, 24],
    iconAnchor: [12, 12],
    popupAnchor: [0, -12]
  });
};

export default function ParkingMapView({ lots, selectedLot, onLotSelect, theme }) {
  const navigate = useNavigate();
  const mapRef = useRef();

  const getAvailabilityStatus = (lot) => {
    const freeSpaces = (lot.total_spaces || 100) - (lot.occupied_spaces || 0);
    const occupancyRate = lot.total_spaces > 0 ? (lot.occupied_spaces / lot.total_spaces) : 0;
    
    if (occupancyRate >= 0.9) return 'full';
    if (occupancyRate >= 0.7) return 'limited';  
    return 'available';
  };

  const getFreeSpaces = (lot) => {
    return Math.max(0, (lot.total_spaces || 100) - (lot.occupied_spaces || 0));
  };

  const handleMarkerClick = (lot) => {
    navigate(createPageUrl(`LotDetail?id=${lot.id}`));
  };

  useEffect(() => {
    if (selectedLot && mapRef.current) {
      const map = mapRef.current;
      map.setView([selectedLot.lat, selectedLot.lng], 16);
    }
  }, [selectedLot]);

  // UMBC campus center coordinates
  const center = [39.2543, -76.7114];

  return (
    <div className="w-full h-full relative">
      <MapContainer
        ref={mapRef}
        center={center}
        zoom={15}
        className="w-full h-full rounded-lg"
        zoomControl={true}
      >
        <TileLayer
          url={theme === 'dark' 
            ? "https://{s}.basemaps.cartocdn.com/dark_all/{z}/{x}/{y}{r}.png"
            : "https://{s}.basemaps.cartocdn.com/light_all/{z}/{x}/{y}{r}.png"
          }
          attribution='&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors &copy; <a href="https://carto.com/attributions">CARTO</a>'
        />
        
        {lots.map((lot) => {
          const status = getAvailabilityStatus(lot);
          const freeSpaces = getFreeSpaces(lot);
          
          return (
            <Marker
              key={lot.id}
              position={[lot.lat, lot.lng]}
              icon={createCustomIcon(status)}
              eventHandlers={{
                click: () => handleMarkerClick(lot)
              }}
            >
              <Popup>
                <div className="text-center">
                  <h3 className="font-semibold text-sm">{lot.name}</h3>
                  <p className="text-xs text-gray-600 mt-1">
                    {freeSpaces}/{lot.total_spaces || 100} Free
                  </p>
                  <div className={`text-xs font-medium mt-1 ${
                    status === 'available' ? 'text-green-600' :
                    status === 'limited' ? 'text-yellow-600' :
                    'text-red-600'
                  }`}>
                    {status === 'available' ? 'Available' :
                     status === 'limited' ? 'Limited' : 'Full'}
                  </div>
                </div>
              </Popup>
            </Marker>
          );
        })}
      </MapContainer>
    </div>
  );
}