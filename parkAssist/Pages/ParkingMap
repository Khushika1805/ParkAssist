
import React, { useState, useEffect, useMemo } from "react";
import { ParkingLot } from "@/entities/ParkingLot";
import { useTheme } from "../components/providers/ThemeContext.js";
import ParkingMapView from "../components/parking/ParkingMapView";
import ParkingLotCard from "../components/parking/ParkingLotCard";
import SearchBar from "../components/parking/SearchBar";
import FilterControls from "../components/parking/FilterControls";
import FavoritesToggle from "../components/parking/FavoritesToggle";

export default function ParkingMapPage() {
  const { theme } = useTheme();
  const [lots, setLots] = useState([]);
  const [searchTerm, setSearchTerm] = useState("");
  const [selectedFilter, setSelectedFilter] = useState("all");
  const [showFavoritesOnly, setShowFavoritesOnly] = useState(false);
  const [selectedLot, setSelectedLot] = useState(null);
  const [isLoading, setIsLoading] = useState(true);

  useEffect(() => {
    loadParkingLots();
  }, []);

  const loadParkingLots = async () => {
    try {
      const fetchedLots = await ParkingLot.list();
      setLots(fetchedLots);
    } catch (error) {
      console.error("Error loading parking lots:", error);
    } finally {
      setIsLoading(false);
    }
  };

  const toggleFavorite = async (lotId) => {
    const lot = lots.find(l => l.id === lotId);
    if (!lot) return;
    
    try {
      await ParkingLot.update(lotId, { is_favorite: !lot.is_favorite });
      setLots(prev => prev.map(l => 
        l.id === lotId ? { ...l, is_favorite: !l.is_favorite } : l
      ));
    } catch (error) {
      console.error("Error updating favorite:", error);
    }
  };

  const getAvailabilityStatus = (lot) => {
    const freeSpaces = (lot.total_spaces || 100) - (lot.occupied_spaces || 0);
    const occupancyRate = lot.total_spaces > 0 ? (lot.occupied_spaces / lot.total_spaces) : 0;
    
    if (occupancyRate >= 0.9) return 'full';
    if (occupancyRate >= 0.7) return 'limited';
    return 'available';
  };

  const filteredLots = useMemo(() => {
    return lots.filter(lot => {
      // Search filter
      const matchesSearch = lot.name.toLowerCase().includes(searchTerm.toLowerCase());
      
      // Favorites filter
      const matchesFavorites = !showFavoritesOnly || lot.is_favorite;
      
      // Status filter
      let matchesStatus = true;
      if (selectedFilter !== 'all') {
        const status = getAvailabilityStatus(lot);
        matchesStatus = status === selectedFilter;
      }
      
      return matchesSearch && matchesFavorites && matchesStatus;
    });
  }, [lots, searchTerm, showFavoritesOnly, selectedFilter]);

  if (isLoading) {
    return (
      <div className="flex items-center justify-center h-64">
        <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-amber-500" />
      </div>
    );
  }

  return (
    <div className="h-full">
      {/* Map View */}
      <div className="h-64 md:h-80">
        <ParkingMapView 
          lots={filteredLots}
          selectedLot={selectedLot}
          onLotSelect={setSelectedLot}
          theme={theme}
        />
      </div>

      {/* Content */}
      <div className="p-4 space-y-4">
        <SearchBar 
          value={searchTerm}
          onChange={setSearchTerm}
        />
        
        <div className="flex items-center justify-between">
          <FilterControls 
            selected={selectedFilter}
            onChange={setSelectedFilter}
          />
          <FavoritesToggle 
            active={showFavoritesOnly}
            onChange={setShowFavoritesOnly}
          />
        </div>

        {/* Lot Cards */}
        <div className="space-y-3">
          {filteredLots.length > 0 ? (
            filteredLots.map((lot) => (
              <ParkingLotCard
                key={lot.id}
                lot={lot}
                status={getAvailabilityStatus(lot)}
                onToggleFavorite={() => toggleFavorite(lot.id)}
              />
            ))
          ) : (
            <div 
              className="text-center py-8 rounded-xl border"
              style={{ 
                backgroundColor: 'var(--bg-card)',
                borderColor: 'var(--border-color)',
                color: 'var(--text-secondary)'
              }}
            >
              <p>No parking lots match your criteria</p>
            </div>
          )}
        </div>
      </div>
    </div>
  );
}
