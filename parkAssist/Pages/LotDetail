
import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { ParkingLot } from '@/entities/ParkingLot';
import { useTheme } from '../components/providers/ThemeContext.js'; // Updated import path
import { ArrowLeft, Star, MapPin, Users, Clock, TrendingUp } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { createPageUrl } from '@/utils';
import LotDetailMap from '../components/lot-detail/LotDetailMap';
import LotStats from '../components/lot-detail/LotStats';

export default function LotDetailPage() {
  const navigate = useNavigate();
  const { theme } = useTheme();
  const [lot, setLot] = useState(null);
  const [isLoading, setIsLoading] = useState(true);

  useEffect(() => {
    const urlParams = new URLSearchParams(window.location.search);
    const lotId = urlParams.get('id');
    
    if (lotId) {
      loadLotDetails(lotId);
    }
  }, []);

  const loadLotDetails = async (lotId) => {
    try {
      const lots = await ParkingLot.list();
      const foundLot = lots.find(l => l.id === lotId);
      if (foundLot) {
        setLot(foundLot);
      }
    } catch (error) {
      console.error('Error loading lot details:', error);
    } finally {
      setIsLoading(false);
    }
  };

  const toggleFavorite = async () => {
    if (!lot) return;
    
    try {
      await ParkingLot.update(lot.id, { is_favorite: !lot.is_favorite });
      setLot(prev => ({ ...prev, is_favorite: !prev.is_favorite }));
    } catch (error) {
      console.error('Error updating favorite:', error);
    }
  };

  const getAvailabilityStatus = () => {
    if (!lot) return 'available';
    const occupancyRate = lot.total_spaces > 0 ? (lot.occupied_spaces / lot.total_spaces) : 0;
    
    if (occupancyRate >= 0.9) return 'full';
    if (occupancyRate >= 0.7) return 'limited';
    return 'available';
  };

  if (isLoading) {
    return (
      <div className="flex items-center justify-center h-64">
        <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-amber-500" />
      </div>
    );
  }

  if (!lot) {
    return (
      <div className="p-4">
        <div className="text-center py-8">
          <p style={{ color: 'var(--text-secondary)' }}>Parking lot not found</p>
        </div>
      </div>
    );
  }

  const status = getAvailabilityStatus();
  const freeSpaces = Math.max(0, (lot.total_spaces || 100) - (lot.occupied_spaces || 0));
  const totalSpaces = lot.total_spaces || 100;
  const occupancyRate = ((lot.occupied_spaces || 0) / totalSpaces * 100).toFixed(0);

  return (
    <div className="h-full">
      {/* Header */}
      <div 
        className="p-4 border-b"
        style={{ 
          backgroundColor: 'var(--bg-primary)',
          borderColor: 'var(--border-color)'
        }}
      >
        <div className="flex items-center justify-between">
          <div className="flex items-center space-x-3">
            <Button
              variant="ghost" 
              size="icon"
              onClick={() => navigate(createPageUrl('ParkingMap'))}
              className="rounded-full"
            >
              <ArrowLeft className="w-5 h-5" />
            </Button>
            <div>
              <h1 className="text-xl font-bold" style={{ color: 'var(--text-primary)' }}>
                {lot.name}
              </h1>
              <div className="flex items-center space-x-2 mt-1">
                <MapPin className="w-3 h-3" style={{ color: 'var(--text-secondary)' }} />
                <span className="text-sm" style={{ color: 'var(--text-secondary)' }}>
                  UMBC Campus
                </span>
              </div>
            </div>
          </div>
          
          <Button
            variant="ghost"
            size="icon"
            onClick={toggleFavorite}
            className={`rounded-full transition-all duration-200 hover:scale-110 ${
              lot.is_favorite ? 'text-amber-500' : ''
            }`}
            style={{ color: lot.is_favorite ? '#F59E0B' : 'var(--text-secondary)' }}
          >
            <Star className={`w-6 h-6 ${lot.is_favorite ? 'fill-current' : ''}`} />
          </Button>
        </div>
      </div>

      {/* Map View */}
      <div className="h-64">
        <LotDetailMap lot={lot} theme={theme} />
      </div>

      {/* Stats */}
      <div className="p-4">
        <LotStats 
          lot={lot}
          status={status}
          freeSpaces={freeSpaces}
          totalSpaces={totalSpaces}
          occupancyRate={occupancyRate}
        />
      </div>
    </div>
  );
}
